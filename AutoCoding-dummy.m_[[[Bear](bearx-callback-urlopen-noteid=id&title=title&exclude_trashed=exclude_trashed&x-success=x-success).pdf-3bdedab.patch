From 3bdedab5a98c1eeaf5a96fc169162c47170ad997 Mon Sep 17 00:00:00 2001
From: à¿‡ Ambjoern E.S.A <archangel.ambriel@icloud.com>
Date: Thu, 18 Jun 2020 23:30:40 +0200
Subject: [PATCH] AutoCoding-dummy.m [[[Bear](bearx-callback-urlopen-noteid=id&title=title&exclude_trashed=exclude_trashed&x-success=x-success).pdf

---
 AutoCoding-dummy.m                                                                                             |  5 +++++
 AutocompleteDetailsUrl.java                                                                                    | 63 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 [[[Bear](bearx-callback-urlopen-noteid=id&title=title&exclude_trashed=exclude_trashed&x-success=x-success).pdf | Bin 0 -> 8858 bytes
 auto_healing_utils-2.py                                                                                        | 56 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 auto_healing_utils-3.py                                                                                        | 56 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 auto_healing_utils.py                                                                                          | 56 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 236 insertions(+)
 create mode 100644 AutoCoding-dummy.m
 create mode 100644 AutocompleteDetailsUrl.java
 create mode 100644 [[[Bear](bearx-callback-urlopen-noteid=id&title=title&exclude_trashed=exclude_trashed&x-success=x-success).pdf
 create mode 100644 auto_healing_utils-2.py
 create mode 100644 auto_healing_utils-3.py
 create mode 100644 auto_healing_utils.py

diff --git a/AutoCoding-dummy.m b/AutoCoding-dummy.m
new file mode 100644
index 0000000..23e0f3f
--- /dev/null
+++ b/AutoCoding-dummy.m
@@ -0,0 +1,5 @@
+#import <Foundation/Foundation.h>
+@interface PodsDummy_AutoCoding : NSObject
+@end
+@implementation PodsDummy_AutoCoding
+@end
diff --git a/AutocompleteDetailsUrl.java b/AutocompleteDetailsUrl.java
new file mode 100644
index 0000000..0ed2a90
--- /dev/null
+++ b/AutocompleteDetailsUrl.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2016 Mozilla Foundation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+package nu.validator.datatype;
+
+import java.util.HashSet;
+
+public final class AutocompleteDetailsUrl extends AbstractAutocompleteDetails {
+
+    /**
+     * The singleton instance.
+     */
+    public static final AutocompleteDetailsUrl THE_INSTANCE = new AutocompleteDetailsUrl();
+
+    private AutocompleteDetailsUrl() {
+        super();
+    }
+
+    private static final HashSet<String> allowedFieldnames = new HashSet<>();
+
+    private static final HashSet<String> allowedContactFieldnames = new HashSet<>();
+
+    static {
+        allowedFieldnames.add("url");
+        allowedFieldnames.add("photo");
+        allowedFieldnames.add("impp");
+        allowedContactFieldnames.add("impp");
+    }
+
+    @Override
+    public HashSet<String> getAllowedFieldnames() {
+        return allowedFieldnames;
+    }
+
+    @Override
+    public HashSet<String> getAllowedContactFieldnames() {
+        return allowedContactFieldnames;
+    }
+
+    @Override
+    public String getName() {
+        return "autocomplete detail tokens (URL)";
+    }
+}
diff --git a/[[[Bear](bearx-callback-urlopen-noteid=id&title=title&exclude_trashed=exclude_trashed&x-success=x-success).pdf b/[[[Bear](bearx-callback-urlopen-noteid=id&title=title&exclude_trashed=exclude_trashed&x-success=x-success).pdf
new file mode 100644
index 0000000000000000000000000000000000000000..3d43058008bf3ed1b3a7fa6af0fc179efec6f30e
GIT binary patch
literal 8858
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
U*FAC=QLre8l7~l8TZ!`j09D}Bod5s;

literal 0
Hc$@<O00001

diff --git a/auto_healing_utils-2.py b/auto_healing_utils-2.py
new file mode 100644
index 0000000..19dff0c
--- /dev/null
+++ b/auto_healing_utils-2.py
@@ -0,0 +1,56 @@
+# -*- coding: utf-8 -*- #
+# Copyright 2017 Google LLC. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+"""Functions for dealing with managed instances groups updates."""
+
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import unicode_literals
+
+
+from googlecloudsdk.calliope import actions
+from googlecloudsdk.calliope import arg_parsers
+from googlecloudsdk.command_lib.compute.health_checks import flags as health_checks_flags
+
+HEALTH_CHECK_ARG = health_checks_flags.HealthCheckArgument(
+    '', '--health-check', required=False)
+
+
+def AddAutohealingArgs(autohealing_params_group):
+  """Adds autohealing-related commandline arguments to parser."""
+  autohealing_params_group.add_argument(
+      '--initial-delay',
+      type=arg_parsers.Duration(),
+      help="""\
+      Specifies the length of time during which the instance is known to be
+      initializing and should not be autohealed even if unhealthy.
+      This value cannot be greater than 1 hour.
+      See $ gcloud topic datetimes for information on duration formats.
+      """)
+  health_check_group = autohealing_params_group.add_mutually_exclusive_group()
+  health_check_group.add_argument(
+      '--http-health-check',
+      help=('HTTP health check object used for autohealing instances in this '
+            'group.'),
+      action=actions.DeprecationAction(
+          'http-health-check',
+          warn='HttpHealthCheck is deprecated. Use --health-check instead.'))
+  health_check_group.add_argument(
+      '--https-health-check',
+      help=('HTTPS health check object used for autohealing instances in this '
+            'group.'),
+      action=actions.DeprecationAction(
+          'https-health-check',
+          warn='HttpsHealthCheck is deprecated. Use --health-check instead.'))
+  HEALTH_CHECK_ARG.AddArgument(health_check_group)
diff --git a/auto_healing_utils-3.py b/auto_healing_utils-3.py
new file mode 100644
index 0000000..19dff0c
--- /dev/null
+++ b/auto_healing_utils-3.py
@@ -0,0 +1,56 @@
+# -*- coding: utf-8 -*- #
+# Copyright 2017 Google LLC. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+"""Functions for dealing with managed instances groups updates."""
+
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import unicode_literals
+
+
+from googlecloudsdk.calliope import actions
+from googlecloudsdk.calliope import arg_parsers
+from googlecloudsdk.command_lib.compute.health_checks import flags as health_checks_flags
+
+HEALTH_CHECK_ARG = health_checks_flags.HealthCheckArgument(
+    '', '--health-check', required=False)
+
+
+def AddAutohealingArgs(autohealing_params_group):
+  """Adds autohealing-related commandline arguments to parser."""
+  autohealing_params_group.add_argument(
+      '--initial-delay',
+      type=arg_parsers.Duration(),
+      help="""\
+      Specifies the length of time during which the instance is known to be
+      initializing and should not be autohealed even if unhealthy.
+      This value cannot be greater than 1 hour.
+      See $ gcloud topic datetimes for information on duration formats.
+      """)
+  health_check_group = autohealing_params_group.add_mutually_exclusive_group()
+  health_check_group.add_argument(
+      '--http-health-check',
+      help=('HTTP health check object used for autohealing instances in this '
+            'group.'),
+      action=actions.DeprecationAction(
+          'http-health-check',
+          warn='HttpHealthCheck is deprecated. Use --health-check instead.'))
+  health_check_group.add_argument(
+      '--https-health-check',
+      help=('HTTPS health check object used for autohealing instances in this '
+            'group.'),
+      action=actions.DeprecationAction(
+          'https-health-check',
+          warn='HttpsHealthCheck is deprecated. Use --health-check instead.'))
+  HEALTH_CHECK_ARG.AddArgument(health_check_group)
diff --git a/auto_healing_utils.py b/auto_healing_utils.py
new file mode 100644
index 0000000..19dff0c
--- /dev/null
+++ b/auto_healing_utils.py
@@ -0,0 +1,56 @@
+# -*- coding: utf-8 -*- #
+# Copyright 2017 Google LLC. All Rights Reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+"""Functions for dealing with managed instances groups updates."""
+
+from __future__ import absolute_import
+from __future__ import division
+from __future__ import unicode_literals
+
+
+from googlecloudsdk.calliope import actions
+from googlecloudsdk.calliope import arg_parsers
+from googlecloudsdk.command_lib.compute.health_checks import flags as health_checks_flags
+
+HEALTH_CHECK_ARG = health_checks_flags.HealthCheckArgument(
+    '', '--health-check', required=False)
+
+
+def AddAutohealingArgs(autohealing_params_group):
+  """Adds autohealing-related commandline arguments to parser."""
+  autohealing_params_group.add_argument(
+      '--initial-delay',
+      type=arg_parsers.Duration(),
+      help="""\
+      Specifies the length of time during which the instance is known to be
+      initializing and should not be autohealed even if unhealthy.
+      This value cannot be greater than 1 hour.
+      See $ gcloud topic datetimes for information on duration formats.
+      """)
+  health_check_group = autohealing_params_group.add_mutually_exclusive_group()
+  health_check_group.add_argument(
+      '--http-health-check',
+      help=('HTTP health check object used for autohealing instances in this '
+            'group.'),
+      action=actions.DeprecationAction(
+          'http-health-check',
+          warn='HttpHealthCheck is deprecated. Use --health-check instead.'))
+  health_check_group.add_argument(
+      '--https-health-check',
+      help=('HTTPS health check object used for autohealing instances in this '
+            'group.'),
+      action=actions.DeprecationAction(
+          'https-health-check',
+          warn='HttpsHealthCheck is deprecated. Use --health-check instead.'))
+  HEALTH_CHECK_ARG.AddArgument(health_check_group)
--
Working Copy 4.2.8

